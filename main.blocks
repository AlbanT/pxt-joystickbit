<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="ZAVaw{FLe^jN}u$)j;Bt" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="dVerHyr;92*2B_pQ8gYn" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace JoyStickBit {" line1="    " line2="    /**" line3="     * The user selects the 4-way dc motor." line4="     */" line5="    export enum JoystickButtons {" line6="        A = 0x1," line7="        B = 0x2," line8="        C = 0x3," line9="        D = 0x4," line10="        E = 0x5," line11="        F = 0x6" line12="    }" line13="" line14="" line15="    /**" line16="     * This is a reporter block that returns the X-value from the joystick" line17="     */" line18="    //% block=&quot;Joystick X value&quot;" line19="    //% group=&quot;Joystick&quot;" line20="    export function JoystickXvalue(): number {" line21="        return pins.analogReadPin(AnalogPin.P0)" line22="    }" line23="" line24="    /**" line25="     * This is a reporter block that returns the Y-value from the joystick" line26="     */" line27="    //% block=&quot;Joystick Y value&quot;" line28="    //% group=&quot;Joystick&quot;" line29="    export function JoystickYvalue(): number {" line30="        return pins.analogReadPin(AnalogPin.P1)" line31="    }" line32="" line33="    /**" line34="     * This is a reporter block that returns the analog value for the buttons" line35="     */" line36="    //% block=&quot;Buttons analog value&quot;" line37="    //% group=&quot;Buttons&quot;" line38="    export function JoystickButtonvalue(): number {" line39="        return pins.analogReadPin(AnalogPin.P2)" line40="    }" line41="" line42="    //% block=&quot;Joystick:bit | %index is pressed&quot;" line43="    //% button.fieldEditor=&quot;gridpicker&quot;" line44="    //% button.fieldOptions.columns=3" line45="    //% button.fieldOptions.tooltips=&quot;false&quot;" line46="    export function isPressed(index: JoystickButtons): boolean {" line47="        let aVal = pins.analogReadPin(AnalogPin.P2);" line48="        switch (index){" line49="            case 0x1:" line50="                if (aVal == 2){" line51="                    return true;" line52="                }" line53="                break;" line54="            case 0x2:" line55="                if (aVal == 516){" line56="                    return true;" line57="                }" line58="                break;" line59="            case 0x3:" line60="                if (aVal == 686){" line61="                    return true;" line62="                }" line63="                break;" line64="            case 0x4:" line65="                if (aVal == 770){" line66="                    return true;" line67="                }" line68="                break;" line69="            case 0x5:" line70="                if (aVal == 854){" line71="                    return true;" line72="                }" line73="                break;" line74="            case 0x6:" line75="                if (aVal == 820){" line76="                    return true;" line77="                }" line78="                break;" line79="            default:" line80="            break;" line81="        }" line82="        return false;" line83="    }  " line84="}" numlines="85"></mutation></block></statement></block></xml>